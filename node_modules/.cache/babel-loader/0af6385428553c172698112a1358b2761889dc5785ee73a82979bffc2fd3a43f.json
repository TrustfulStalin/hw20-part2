{"ast":null,"code":"var _jsxFileName = \"/root/GA/hw20_react_express_portfolio/frontend/src/pages/Projects.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Projects(props) {\n  _s();\n  // create state to hold projects\n  const [projects, setProjects] = useState(null);\n\n  //create function to make api call\n  const getProjectsData = async () => {\n    //make api call and get response\n    const response = await fetch(props.URL + \"projects\");\n    // turn response into javascript object\n    const data = await response.json();\n    // set the projects state to the data\n    setProjects(data);\n  };\n\n  // make an initial call for the data inside a useEffect, so it only happens once on component load\n  useEffect(() => getProjectsData(), []);\n\n  // define a function that will return the JSX needed once we get the data\n  const loaded = () => {\n    return projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: project.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: project.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: project.git,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Github\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: project.live,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"live site\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this));\n  };\n  return projects ? loaded() : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 32\n  }, this);\n}\n_s(Projects, \"KL5sgk8pm0HzOCuFqYY4fikIxrI=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Projects","props","_s","projects","setProjects","getProjectsData","response","fetch","URL","data","json","loaded","map","project","children","name","fileName","_jsxFileName","lineNumber","columnNumber","src","image","href","git","live","_c","$RefreshReg$"],"sources":["/root/GA/hw20_react_express_portfolio/frontend/src/pages/Projects.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction Projects(props) {\r\n  // create state to hold projects\r\n  const [projects, setProjects] = useState(null);\r\n\r\n  //create function to make api call\r\n  const getProjectsData = async () => {\r\n    //make api call and get response\r\n    const response = await fetch(props.URL + \"projects\");\r\n    // turn response into javascript object\r\n    const data = await response.json();\r\n    // set the projects state to the data\r\n    setProjects(data);\r\n  };\r\n\r\n  // make an initial call for the data inside a useEffect, so it only happens once on component load\r\n  useEffect(() => getProjectsData(), []);\r\n\r\n  // define a function that will return the JSX needed once we get the data\r\n  const loaded = () => {\r\n    return projects.map((project) => (\r\n      <div>\r\n        <h1>{project.name}</h1>\r\n        <img src={project.image} />\r\n        <a href={project.git}>\r\n          <button>Github</button>\r\n        </a>\r\n        <a href={project.live}>\r\n          <button>live site</button>\r\n        </a>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return projects ? loaded() : <h1>Loading...</h1>;\r\n}\r\n\r\nexport default Projects;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,KAAK,CAACO,GAAG,GAAG,UAAU,CAAC;IACpD;IACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC;IACAN,WAAW,CAACK,IAAI,CAAC;EACnB,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAMQ,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEtC;EACA,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnB,OAAOR,QAAQ,CAACS,GAAG,CAAEC,OAAO,iBAC1Bd,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAKD,OAAO,CAACE;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvBpB,OAAA;QAAKqB,GAAG,EAAEP,OAAO,CAACQ;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3BpB,OAAA;QAAGuB,IAAI,EAAET,OAAO,CAACU,GAAI;QAAAT,QAAA,eACnBf,OAAA;UAAAe,QAAA,EAAQ;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eACJpB,OAAA;QAAGuB,IAAI,EAAET,OAAO,CAACW,IAAK;QAAAV,QAAA,eACpBf,OAAA;UAAAe,QAAA,EAAQ;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN,CAAC;EACJ,CAAC;EAED,OAAOhB,QAAQ,GAAGQ,MAAM,CAAC,CAAC,gBAAGZ,OAAA;IAAAe,QAAA,EAAI;EAAU;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAClD;AAACjB,EAAA,CAlCQF,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAoCjB,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}